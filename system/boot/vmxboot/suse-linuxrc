#!/bin/bash
#================
# FILE          : linuxrc
#----------------
# PROJECT       : OpenSuSE KIWI Image System
# COPYRIGHT     : (c) 2006 SUSE LINUX Products GmbH. All rights reserved
#               :
# AUTHOR        : Marcus Schaefer <ms@suse.de>
#               :
# BELONGS TO    : Operating System images
#               :
# DESCRIPTION   : This file is changed to become the real
#               : linuxrc script which is used to prepare the
#               : operating system for the main image
#               :
#               :
# STATUS        : BETA
#----------------
#======================================
# Exports (General)
#--------------------------------------
export PATH="/sbin:/bin:/usr/sbin:/usr/bin"
export IFS_ORIG=$IFS
export ARCH=`arch`
export DEBUG=0

#======================================
# Exports (Booting)
#--------------------------------------
export DOMURD_MODULES="xennet xenblk"
export INITRD_MODULES="reiserfs"
export LOCAL_BOOT="no"
export systemIntegrity="clean"
export KERNEL_LIST

#======================================
# Exports (Alias)
#--------------------------------------
export SYSALIAS="undefined"
export NAME=0

#======================================
# Exports (Partitioning)
#--------------------------------------
export PART_FILE="/etc/partition.table"
export PART_MOUNT
export PART_DEV
export PART_COUNT=0
export PART_NUMBER=0
export PART_NEED_EXTENDED=0
export PART_NEED_FILL=0
export NO_FILE_SYSTEM=0

#======================================
# Exports (Status)
#--------------------------------------
export SYSTEM_INTEGRITY
export SYSTEM_MD5STATUS

#======================================
# Functions
#--------------------------------------
. /include

#======================================
# Functions
#--------------------------------------
VMFindSystem () {
	for module in BusLogic;do
		modprobe $module >/dev/null 2>&1
	done
	sleep 5
	for rdevice in /dev/hda2 /dev/sda2 /dev/hda1 /dev/sda1;do
		imageRootDevice=$rdevice
		imageDiskDevice=`echo $imageRootDevice | tr -d [0-9]`
		if ! mount $imageRootDevice /mnt &>/dev/null;then
			mount -t squashfs $imageRootDevice /mnt &>/dev/null
		fi
		if [ $? = 0 ];then
			umount /mnt
			break
		fi
	done
}
#======================================
# Beautify Startup
#--------------------------------------
clear
echo "Loading KIWI VMX Boot-System..."
echo "-------------------------------"

#======================================
# 1) Mounting local file systems
#--------------------------------------
mountSystemFilesystems &>/dev/null
closeKernelConsole

#======================================
# 2) Prepare module load support 
#--------------------------------------
touch /etc/modules.conf
touch /lib/modules/*/modules.dep

#======================================
# 3) run udevd
#--------------------------------------
udevStart

#======================================
# 4) start boot shell
#--------------------------------------
startShell
errorLogStart
openKernelConsole

#======================================
# 5) Including required kernel modules
#--------------------------------------
probeDevices

#======================================
# 6) Mount VM (boot)
#--------------------------------------
VMFindSystem

#======================================
# 7) Get filesystem type
#--------------------------------------
probeFileSystem $imageRootDevice
if [ $FSTYPE = "unknown" ];then
	systemException \
		"Couldn't determine filesystem type... abort" \
	"reboot"
fi

#======================================
# 8) Resize filesystem to full space
#--------------------------------------
Echo "Filesystem of VMX system is: $FSTYPE -> $imageRootDevice"
if test "$FSTYPE" = "squashfs";then
	export UNIONFS_CONFIG="$imageDiskDevice"3,"$imageDiskDevice"2,aufs
else
	if test "$FSTYPE" = "reiserfs";then
		Echo "Resize Reiser filesystem to full partition space..."
		resize_reiserfs $imageRootDevice
		INITRD_MODULES="$INITRD_MODULES reiserfs"
	fi
	if test "$FSTYPE" = "ext2";then
		Echo "Resize EXT2 filesystem to full partition space..."
		resize2fs -f -F -p $imageRootDevice
		Echo "Checking EXT2 filesystem..."
		e2fsck -y -f $imageRootDevice
		INITRD_MODULES="$INITRD_MODULES ext2"
	fi
	if test "$FSTYPE" = "ext3";then
		Echo "Resize EXT3 filesystem to full partition space..."
		resize2fs -f -F -p $imageRootDevice
		Echo "Checking EXT3 filesystem..."
		e2fsck -y -f $imageRootDevice
		INITRD_MODULES="$INITRD_MODULES ext3"
	fi
fi

#======================================
# 9) Mount VM (boot)
#--------------------------------------
if ! mountSystem $imageRootDevice;then
	systemException "Failed to mount root filesystem" "reboot"
fi

#======================================
# 10) Get kernel list for local boot
#--------------------------------------
kernelList /mnt

#======================================
# 11) Create system dependant files
#--------------------------------------
setupDefaultFstab /config
updateRootDeviceFstab /config $imageRootDevice
setupBootLoaderGrub /mnt /config 0 $imageRootDevice VMX
setupKernelModules /config

#======================================
# 12) copy system dependant files
#--------------------------------------
cd /config
find . -type d | while read d ; do  mkdir -p /mnt/$d ; done
find . -type f | while read f ; do  cp $f /mnt/$f ; done
cd /
rm -rf /config

#======================================
# 13) setup real root device
#--------------------------------------
echo 256 > /proc/sys/kernel/real-root-dev

#======================================
# 14) umount system filesystems
#--------------------------------------
umountSystemFilesystems

#======================================
# 15) copy initrd files to image
#--------------------------------------
if [ -f /image/loader/message ];then
	mv /image/loader/message /mnt/boot
fi
cp /preinit /mnt
cp /include /mnt

#======================================
# 16) kill boot shell
#--------------------------------------
killShell

#======================================
# 17) Activate new root
#--------------------------------------
Echo "Activating Image: [$imageRootDevice]"
reopenKernelConsole
/sbin/udevsettle --timeout=30
mount --move /dev /mnt/dev
udevKill

#======================================
# 18) call preinit phase
#--------------------------------------
Echo "Calling preinit phase..."
cd /mnt && exec < dev/console >dev/console 2>&1
/mnt/sbin/pivot_root . mnt >/dev/null 2>&1
if test $? != 0;then
	PIVOT=false
	cleanInitrd && mount --move . / && chroot . ./preinit
	chroot . rm -f  ./preinit
	chroot . rm -f  ./include
	chroot . rm -rf ./image
else
	PIVOT=true
	./preinit
	rm -f  ./preinit
	rm -f  ./include
	rm -rf ./image
fi

#======================================
# 19) Unmount initrd / system init
#--------------------------------------
echo " "
echo "Booting into final System..."
echo "----------------------------"
export IFS=$IFS_ORIG
mount -n -o remount,rw / 2>/dev/null
if [ $PIVOT = "true" ];then
	exec umount -n -l /mnt
else
	exec chroot . /sbin/init $@
fi
