#!/bin/bash
#================
# FILE          : linuxrc
#----------------
# PROJECT       : OpenSuSE KIWI Image System
# COPYRIGHT     : (c) 2006 SUSE LINUX Products GmbH. All rights reserved
#               :
# AUTHOR        : Marcus Schaefer <ms@suse.de>
#               :
# BELONGS TO    : Operating System images
#               :
# DESCRIPTION   : This file is changed to become the real
#               : linuxrc script which is used to prepare the
#               : operating system for the main image
#               :
#               :
# STATUS        : BETA
#----------------
#======================================
# Exports (General)...
#--------------------------------------
export PATH="/sbin:/bin:/usr/sbin:/usr/bin"
export IFS_ORIG=$IFS
export DEBUG=0

#======================================
# Exports (Booting)
#--------------------------------------
export LOCAL_BOOT=no
export systemIntegrity="clean"

#======================================
# Functions...
#--------------------------------------
. /include
initialize

#======================================
# Beautify Startup
#--------------------------------------
echo "Loading KIWI USB-Stick Boot-System..."
echo "-------------------------------------"

#======================================
# Update library path
#--------------------------------------
ldconfig

#======================================
# 1) Mounting local file systems
#--------------------------------------
mountSystemFilesystems &>/dev/null
closeKernelConsole

#======================================
# 2) Prepare module load support 
#--------------------------------------
touch /etc/modules.conf
touch /lib/modules/*/modules.dep

#======================================
# 3) run udevd
#--------------------------------------
udevStart
includeKernelParameters

#======================================
# 4) start boot shell
#--------------------------------------
startBlogD
startShell
errorLogStart
openKernelConsole

#======================================
# 5) Including required kernel modules
#--------------------------------------
probeDevices

#======================================
# 6) Setup device names...
#--------------------------------------
if ! searchBIOSBootDevice;then
	systemException "$biosBootDevice" "reboot"
fi
export stickRoot=$biosBootDevice
export stickDevice=$(ddn $stickRoot 1)
export stickRWDevice=$(ddn $stickRoot 2)
export stickRODevice=$(ddn $stickRoot 1)
export imageDiskDevice=$stickRoot
Echo "Searching for $VGROUP volume group..."
if searchVolumeGroup; then
	export haveLVM=yes
	if [ -e /dev/$VGROUP/LVComp ];then
		export stickDevice=/dev/$VGROUP/LVComp
	else
		export stickDevice=/dev/$VGROUP/LVRoot
	fi
	export stickRWDevice=/dev/$VGROUP/LVRoot
	export stickRODevice=/dev/$VGROUP/LVComp
	export stickBootDevice=$(ddn $stickRoot 2)
fi

#======================================
# 7) Probe filesystem of stick system
#--------------------------------------
probeFileSystem $stickDevice
if [ "$FSTYPE" = "luks" ];then
	stickDevice=$(luksOpen $stickDevice)
	stickRODevice=$stickDevice
	probeFileSystem $stickDevice
	export haveLuks=yes
fi
if [ $FSTYPE = "unknown" ];then
	systemException \
		"Couldn't determine filesystem type... abort" \
	"reboot"
fi

#======================================
# 8) Setup union on compressed root
#--------------------------------------
Echo "Filesystem of stick system is: $FSTYPE -> $stickDevice"
if isFSTypeReadOnly;then
	setupUnionFS $stickRWDevice $stickRODevice $unionFST
fi

#======================================
# 9) Mount USB stick (system)
#--------------------------------------
if ! mountSystem $stickDevice;then
	systemException "Failed to mount root filesystem" "reboot"
fi
validateRootTree

#======================================
# 10) check for local boot
#--------------------------------------
if [ -e /mnt/etc/ImagePackages ];then
	export LOCAL_BOOT=yes
fi

#======================================
# 11) Create system dependant files
#--------------------------------------
if [ "$LOCAL_BOOT" = "no" ];then
	setupDefaultFstab /config
	updateRootDeviceFstab /config $stickDevice
	if [ "$haveLVM" = "yes" ];then
		updateLVMBootDeviceFstab /config $stickBootDevice
	elif [ "$haveClicFS" = "yes" ];then
		updateClicBootDeviceFstab /config $imageBootDevice
	elif [ "$loader" = "syslinux" ] || [ "$loader" = "extlinux" ];then
		updateSyslinuxBootDeviceFstab /config $imageBootDevice
	elif [ "$haveLuks" = "yes" ];then
		updateLuksBootDeviceFstab /config $imageBootDevice
	fi
fi

#======================================
# 12) copy system dependant files
#--------------------------------------
if [ "$LOCAL_BOOT" = "no" ];then
	setupConfigFiles
fi

#======================================
# 13) update system dependant files
#--------------------------------------
if [ "$LOCAL_BOOT" = "no" ];then
	setupInittab /mnt
fi

#======================================
# 14) setup real root device
#--------------------------------------
echo 256 > /proc/sys/kernel/real-root-dev

#======================================
# 15) umount system filesystems
#--------------------------------------
umountSystemFilesystems

#======================================
# 16) copy initrd files to image
#--------------------------------------
if [ ! -f /mnt/boot/deployed ];then
	touch /mnt/boot/deployed
	importBranding
fi
cp /preinit /mnt
cp /include /mnt

#======================================
# 17) kill boot shell
#--------------------------------------
killShell
killBlogD

#======================================
# 18) Activate new root
#--------------------------------------
activateImage

#======================================
# 19) Unmount initrd / system init
#--------------------------------------
bootImage $@
