#!/bin/bash
#================
# FILE          : linuxrc
#----------------
# PROJECT       : OpenSuSE KIWI Image System
# COPYRIGHT     : (c) 2006 SUSE LINUX Products GmbH. All rights reserved
#               :
# AUTHOR        : Marcus Schaefer <ms@suse.de>
#               :
# BELONGS TO    : Operating System images
#               :
# DESCRIPTION   : This file is changed to become the real
#               : linuxrc script which is used to prepare the
#               : operating system for the main image
#               :
#               :
# STATUS        : BETA
#----------------
#
#======================================
# Exports...
#--------------------------------------
export PATH="/sbin:/bin:/usr/sbin:/usr/bin"
export CONFIG="/cdrom/config.isoclient"
export LIVESYSTEM="livesystem"
export LIVECD="livecd"
export IFS_ORIG=$IFS

DEBUG=0
#======================================
# Functions...
#--------------------------------------
Debug () {
	if test "$DEBUG" = 1;then
		echo "+++++> $1"
	fi
}
Echo () {
	if test "$1" = "-n";then
		echo $1 "-----> $2"
	elif test "$1" = "-b";then
		echo "       $2"
	else
		echo "-----> $1"
	fi
}
WaitKey () {
	if test "$DEBUG" = 1;then
		Echo -n "Press any key to continue..."
		read
	fi
}
closeKernelConsole () {
	if test "$DEBUG" = 0;then
		/usr/sbin/klogconsole -l 1
	fi
}
reopenKernelConsole () {
	/usr/sbin/klogconsole -l 7
}
importFile () {
	IFS="
	"
	while read line;do
	IFS="="
	count=0
	for item in $line;do
		if test $count = 0 ; then
			key=$item ; count=1 ; continue
		fi
		if test $count = 1 ; then
			item=`echo $item | tr -d \'`
			Debug "$key=$item"
			eval export $key\=\"$item\"
			count=0
		fi
	done
	done
}
systemException () {
	Echo "$1"
	case "$2" in
	"reboot")
		Echo "rebootException: reboot in 60 sec..."; sleep 60
		/sbin/restart >/dev/null 2>&1
	;;
	"wait")
		Echo "waitException: waiting for ever..."
		while true;do sleep 100;done
	;;
	"shell")
		Echo "shellException: providing shell..."
		/bin/sh
	;;
	*)
		Echo "unknownException..."
	;;
	esac
}
probeNetworkCard () {
	hwnet=/usr/sbin/hwinfo
	hwstr="Driver Activation Cmd:"
	hwcmd=`$hwnet --netcard | grep "$hwstr" | head -n 1`
	hwcmd=`echo $hwcmd | cut -f2 -d:`
	hwcmd=`echo $hwcmd | tr -d \" | cut -f2 -d " "`
	if [ ! -z "$hwcmd" ];then
		networkModule=$hwcmd
	fi
}
setupNetwork () {
	dhcpcd eth0 >/dev/null 2>&1
	if test $? != 0;then
		return
	fi
	ifconfig lo 127.0.0.1 netmask 255.0.0.0 up
	for i in 1 2 3 4 5 6 7 8 9 0;do
		[ -s /var/lib/dhcpcd/dhcpcd-eth0.info ] && break
		sleep 5
	done
	importFile < /var/lib/dhcpcd/dhcpcd-eth0.info
	echo "search $DOMAIN" > /etc/resolv.conf
	IFS="," ; for i in $DNS;do
		echo "nameserver $i" >> /etc/resolv.conf
	done
}
enoughRAM () {
	needRAM=`expr $blocks \* $blocksize`
	needRAM=`expr $needRAM / 1024`
	needRAM=`expr $needRAM + 128`
	hasRAM=`cat /proc/meminfo | grep MemFree | cut -f2 -d:`
	hasRAM=`echo $hasRAM | cut -f1 -d" "`
	if test $hasRAM -gt $needRAM;then
		return 0
	fi
	return 1
}
CDDevice () {
	for module in usb-storage sr_mod cdrom ide-generic ide-cd;do
		/sbin/modprobe $module
	done
	info="/proc/sys/dev/cdrom/info"
	cddev=`cat $info | grep "drive name:" | cut -f2 -d: | tr "\t" ":"`
	cddev=`echo $cddev | cut -f3 -d:`
	cddev=`echo $cddev | tr -d [:space:]`
	if test ! -b "/dev/$cddev"; then
		systemException \
			"Failed to detect CD drive !" \
		"reboot"
	fi
	cddev="/dev/$cddev"
}
CDMount () {
	CDDevice
	mkdir -p /cdrom
	mount $cddev /cdrom 2>/dev/null
}
CDUmount () {
	umount $cddev
}
#======================================
# Beautify Startup
#--------------------------------------
clear
echo "Loading KIWI CD Boot-System..."
echo "------------------------------"

#======================================
# 1) Mounting local file systems
#--------------------------------------
mount -t proc  proc    /proc
mount -t sysfs sysfs   /sys
mount -t devpts devpts /dev/pts
closeKernelConsole

#======================================
# 2) Prepare module load support 
#--------------------------------------
touch /etc/modules.conf
touch /lib/modules/*/modules.dep

#======================================
# 3) Obtain/load network module
#--------------------------------------
probeNetworkCard
if test ! -z "$networkModule";then
	#=============================================
	# network module found, try to load
	#---------------------------------------------
	modprobe $networkModule 2>/dev/null
fi  

#======================================
# 4) Setup network interface and DNS
#--------------------------------------
setupNetwork

#======================================
# 5) Mount the CD device
#--------------------------------------
CDMount

#======================================
# 6) Load configuration
#--------------------------------------
if [ ! -f $CONFIG ];then
	systemException \
		"Couldn't find CD image configuration file" \
	"reboot"
fi
importFile < $CONFIG

#======================================
# 7) Download RW part of the CD image
#--------------------------------------
IFS="," ; for i in $IMAGE;do
	field=0
	IFS=";" ; for n in $i;do
	case $field in
		0) imageDevice=$n ; field=1 ;;
		1) imageName=$n   ; field=2 ;;
		2) imageVersion=$n
	esac
	done
	imageBase=$imageName
	imageName="/cdrom/$imageName-$imageVersion"
	imageMD5s="$imageName.md5"
	while true;do
		Echo "Loading $imageName [$imageDevice]..."
		IFS=" "
		read sum1 blocks blocksize < $imageMD5s
		if ! enoughRAM;then
			systemException \
				"Not enough RAM available for this image" \
			"reboot"
		fi
		dd if=$imageName of=$imageDevice count=$blocks \
			bs=$blocksize >/dev/null 2>&1
		dd if=$imageDevice count=$blocks bs=$blocksize 2>/dev/null |\
			md5sum - > /etc/ireal.md5
		read sum2 dumy < /etc/ireal.md5
		if test $sum1 = $sum2;then
			Echo "Image checksum test: fine :-)"
			break
		fi
		Echo "Image checksum test failed:"
		echo
		Echo -b "1) Data corruption while loading the image:"
		Echo -b "   will give it a new try..."
		echo
		Echo -b "2) ramdisk size is too small for the image:"
		Echo -b "   try to set the kernel parameter ramdisk_size=<size>"
		echo
		Echo "Retry to load image..."
		sleep 15
	done
	rm -f /etc/ireal.md5
done
CDUmount

#======================================
# 8) Mount OS image to /mnt
#--------------------------------------
mount $imageDevice /mnt
mkdir -p /mnt/$LIVECD && mount $cddev /mnt/$LIVECD
mkdir -p /mnt/$LIVESYSTEM && mount -o loop \
	/mnt/$LIVECD/$imageBase-$imageVersion-read-only /mnt/$LIVESYSTEM

#======================================
# 9) Create RO Link list
#--------------------------------------
cd /mnt
for dir in bin boot lib opt sbin usr;do
	ln -s $LIVESYSTEM/$dir $dir
done
cd /

#======================================
# 10) Create system dependant files
#--------------------------------------
mkdir -p /config/etc
echo "$imageDevice / $FSTYPE   defaults 0 0"         > /config/etc/fstab
echo "devpts  /dev/pts devpts  mode=0620,gid=5 0 0" >> /config/etc/fstab
echo "proc    /proc    proc    defaults 0 0"        >> /config/etc/fstab
echo "sysfs   /sys     sysfs   noauto 0 0"          >> /config/etc/fstab
echo "tmpfs   /dev/shm tmpfs   defaults 0 0"        >> /config/etc/fstab

#======================================
# 11) copy system dependant files
#--------------------------------------
cd /config
find . -type d | while read d ; do  mkdir -p /mnt/$d ; done
find . -type f | while read f ; do  cp $f /mnt/$f ; done
cd /
rm -rf /config

#======================================
# 12) setup real root device
#--------------------------------------
echo 256 > /proc/sys/kernel/real-root-dev

#======================================
# 13) umount system filesystems
#--------------------------------------
umount /dev/pts
umount /sys
umount /proc

#======================================
# 14) copy initrd files to image
#--------------------------------------
cp /etc/resolv.conf /mnt/etc

#======================================
# 15) Activate new root
#--------------------------------------
Echo "Activating Image: [$imageBase]"
cd /mnt && exec < dev/console >dev/console 2>&1
/mnt/sbin/pivot_root . mnt >/dev/null 2>&1
if test $? != 0;then
	PIVOT=false
	mount --move . / && chroot .
else
	PIVOT=true
fi
#======================================
# 16) Unmount initrd / system init
#--------------------------------------
echo " "
echo "Booting into Live CD System..."
echo "------------------------------"
reopenKernelConsole
mount -n -o remount,rw / 2>/dev/null
if [ $PIVOT = "true" ];then
	exec umount -n -l /mnt
else
	exec chroot . /sbin/init
fi
