<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC 
  "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.docbook.org/xml/4.4/docbookx.dtd">

<refentry>
  <refentryinfo>
    <productname>KIWI</productname>
    <!--<productnumber></productnumber>-->
    <date>Created: <?dbtimestamp?></date>
    <releaseinfo role="SVN">$Date: 2007-12-03 16:22:06 +0100 (Mon, 03 Dec 2007) $</releaseinfo>
    <authorgroup>
      <author>
        <firstname>Marcus</firstname>
        <surname>Sch√§fer</surname>
        <contrib>Developer</contrib>
        <email>ms (AT) suse.de</email>
      </author>
    </authorgroup>    
  </refentryinfo>
  <refmeta>
    <refentrytitle>kiwi</refentrytitle>
    <manvolnum>1</manvolnum>
    <refmiscinfo class="version">v2.10, r938</refmiscinfo>
    <refmiscinfo class="manual">KIWI Manualpage</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>KIWI::config.sh</refname>
    <refpurpose>Configuration File for KIWI image description</refpurpose>
  </refnamediv>

  <refsect1 id="kiwi.config.description">
    <title>Description</title>
    <para>
      The kiwi image description allows to have an optional config.sh script
      in place. This script should be designed to take over control of adding
      the image operating system configuration. Configuration in that sense
      means stuff like activating services, creating configuration files, prepare
      an environment for a firstboot workflow, etc. What you shouldn't do in
      config.sh is breaking your systems integrity by for example removing
      packages or pieces of software. Something like that can be done in images.sh.
      config.sh is called <emphasis>after</emphasis> the user and groups have
      been set up. If there are SUSE Linux related YaST xml information these are
      validated before config.sh is called too. If you exit config.sh with an
      exit code != 0 kiwi will exit with an error too.
    </para>
  </refsect1>

  <example>
    <title>Template</title>
    <programlisting>
#======================================
# Functions...
#--------------------------------------
test -f /.kconfig &amp;&amp; . /.kconfig
test -f /.profile &amp;&amp; . /.profile

#======================================
# Greeting...
#--------------------------------------
echo "Configure image: [$name]..."

#======================================
# Call configuration code/functions
#--------------------------------------
...

#======================================
# Exit safely
#--------------------------------------
exit</programlisting>
  </example>

  <refsect1 id="kiwi.config.functions">
    <title>Common functions</title>
    <para>
      The .kconfig file allows to make use of a common set of functions. Those which
      are SUSE Linux specific starts with the name <emphasis>suse</emphasis>. Those which
      are common to all linux systems starts with the name <emphasis>base</emphasis>.
      The following list describes which functions are available for config.sh
    </para>    
	<variablelist>
      <varlistentry>
        <term><optional>baseCleanMount</optional></term>
        <listitem>
          <para>
            Umount the system filesystems /proc /dev/pts /sys
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>baseSetupUserPermissions</optional></term>
        <listitem>
          <para>
            Search all home directories of all users listed in /etc/passwd
            and change the ownership of all files to belong to the correct
            user and group
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>baseGetProfilesUsed</optional></term>
        <listitem>
          <para>
            Return the name(s) of profiles used to build this image
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>baseSetupInPlaceSVNRepository</optional></term>
        <listitem>
          <para>
           Create an in place subversion repository for the
           specified directories. A standard call could look like this
           baseSetupInPlaceSVNRepository /etc /srv /var/log 
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>baseSetupInPlaceGITRepository</optional></term>
        <listitem>
          <para>
            Create an in place git repository of the root
            directory. This process may take some time and you
            may expect problems with binary data handling
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>suseInsertService</optional></term>
        <listitem>
          <para>
            Recursively insert a service. If there is a service
            required for this service it will be inserted first. The suse
            insserv program is used here
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>suseRemoveService</optional></term>
        <listitem>
          <para>
            Remove a service and its dependant services
            using the suse insserv program
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>suseActivateServices</optional></term>
        <listitem>
          <para>
            Check all services in /etc/init.d/ and activate them
            by calling suseInsertService
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>suseActivateDefaultServices</optional></term>
        <listitem>
          <para>
            Call all postin scriptlets which among other things activates
            all required default services using suseInsertService
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>suseService</optional></term>
        <listitem>
          <para>
            Activate/Deactivate a service by using the chkconfig program
            The function requires the service name and the value on or off
            as parameters
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>suseServiceDefaultOn</optional></term>
        <listitem>
          <para>
            Activates the following services to be on by default using the
            chkconfig program: boot.rootfsck boot.cleanup boot.localfs boot.localnet
            boot.clock policykitd haldaemon network atd syslog cron
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>suseConfig</optional></term>
        <listitem>
          <para>
            Setup keytable language and timezone if specified in config.xml and
            call SuSEconfig afterwards
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>suseSetupProductInformation</optional></term>
        <listitem>
          <para>
            This function will use zypper to search for the installed
            product and install all product specific packages. This function
            only makes sense if zypper is used as packagemanager
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
  
  <refsect1 id="kiwi.config.environment">
    <title>Profile environment variables</title>
    <para>
      The .profile environment file contains a specific set of variables which
      are listed below. Some of the functions above makes use of the variables.
	</para>
    <variablelist>
      <varlistentry>
        <term><optional>$name</optional></term>
        <listitem>
          <para>
            The name of the image as listed in config.xml
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>$keytablee</optional></term>
        <listitem>
          <para>
            The contents of the keytable setup as done in config.xml
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>$language</optional></term>
        <listitem>
          <para>
            The contents of the locale setup as done in config.xml
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>$timezone</optional></term>
        <listitem>
          <para>
            The contents of the timezone setup as done in config.xml
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>$delete</optional></term>
        <listitem>
          <para>
            A list of all packages which are part of the packages section
            with type='delete' in config.xml
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>$profiles</optional></term>
        <listitem>
          <para>
            A list of profiles used to build this image
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>$drivers</optional></term>
        <listitem>
          <para>
            A comma seperated list of the driver entries as listed in the
            drivers section of the config.xml. Similar variables exists for
            the usbdrivers and scsidrivers sections
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>$size</optional></term>
        <listitem>
          <para>
            The predefined size value for this image. This is not the computed
            size but only the optional size value of the preferences section
            in config.xml
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>$compressed</optional></term>
        <listitem>
          <para>
            The value of the compressed flag of the preferences section in
            config.xml
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><optional>$type</optional></term>
        <listitem>
          <para>
            The basic image type. Can be a simply filesystem image type of
            ext2 ext3 reiserfs squashfs cpio or one of the following complex
            image types: iso split usb vmx oem xen pxe
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>  
</refentry>
